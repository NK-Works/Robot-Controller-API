openapi: 3.0.1
info:
  title: Robot Controller API
  description: New backend service that provides resources for the Moon robot simulator.
  contact:
    name: Anneshu Nag
    email: anneshu4760.be22@chitkara.edu.in
paths:
  /api/maps:
    get:
      tags:
        - Maps
      summary: Retrieves all existing maps.
      description: "Sample request: \r\n\r\nGET /api/maps"
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
    post:
      tags:
        - Maps
      summary: Creates a new map.
      description: "Sample request: \r\n\r\nPOST /api/maps\r\n{\r\n    \"columns: 10,\r\n    \"rows\": 10,\r\n    \"name\": \"10 Map\", \r\n    \"description\": \"Basic Moon Map\" \r\n}"
      requestBody:
        description: A new map from the HTTP request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
          text/json:
            schema:
              $ref: '#/components/schemas/Map'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Map'
      responses:
        '201':
          description: Returns the newly created map
        '400':
          description: If the map is null
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: If a map with the same name already exists.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/maps/square:
    get:
      tags:
        - Maps
      summary: Retrieves maps where columns equal rows.
      description: "Sample request: \r\n\r\nGET /api/maps/square"
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
  '/api/maps/{id}':
    get:
      tags:
        - Maps
      summary: Retrieves a map by its ID.
      description: "Sample request: \r\n\r\nGET /api/maps/{id}"
      operationId: GetMap
      parameters:
        - name: id
          in: path
          description: The ID of the map to be fetched.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returns the map with the specified ID.
        '404':
          description: If the map with the specified ID is not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Maps
      summary: Updates an already existing map.
      description: "Sample request: \r\n\r\nPUT /api/maps/{id}\r\n{\r\n    \"id\": {id},\r\n    \"columns: 100,\r\n    \"rows\": 100,\r\n    \"name\": \"100 Map\", \r\n    \"description\": \"Updated Moon Map\" \r\n}"
      parameters:
        - name: id
          in: path
          description: The ID of the map to update.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        description: The updated information for the map.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
          text/json:
            schema:
              $ref: '#/components/schemas/Map'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Map'
      responses:
        '204':
          description: No content if the update is successful.
        '400':
          description: If the provided data is invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the map with the specified ID is not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Maps
      summary: Deletes a map by its ID.
      description: "Sample request: \r\n\r\nDELETE /api/maps/{id}"
      parameters:
        - name: id
          in: path
          description: The ID of the map to delete.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No content if the deletion is successful.
        '404':
          description: If the map with the specified ID is not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/maps/{id}/{x}-{y}':
    get:
      tags:
        - Maps
      summary: 'Checks if the given coordinate (x, y) is on the map with the specified ID.'
      description: "Sample request: \r\n\r\nGET /api/maps/{id}/{x}-{y}"
      parameters:
        - name: id
          in: path
          description: The ID of the map to check.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
        - name: x
          in: path
          description: The x-coordinate to check.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
        - name: y
          in: path
          description: The y-coordinate to check.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returns true if the coordinate is present in the map with the specified else false.
        '400':
          description: If the provided map coordinated is invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the specified map is not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/robot-commands:
    get:
      tags:
        - RobotCommands
      summary: Retrieves all existing robot commands.
      description: "Sample request: \r\n\r\nGET /api/robot-commands"
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotCommand'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotCommand'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotCommand'
    post:
      tags:
        - RobotCommands
      summary: Creates a robot command.
      description: "Sample request: \r\n\r\nPOST /api/robot-commands\r\n{\r\n    \"name\": \"JUMP\", \r\n    \"isMoveCommand\": true, \r\n    \"description\": \"Jump on the Moon\" \r\n}"
      requestBody:
        description: A new robot command from the HTTP request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RobotCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RobotCommand'
      responses:
        '201':
          description: Returns the newly created robot command
        '400':
          description: If the robot command is null
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: If a robot command with the same name already exists.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/robot-commands/move:
    get:
      tags:
        - RobotCommands
      summary: Retrieves only move commands among all robot commands.
      description: "Sample request: \r\n\r\nGET /api/robot-commands/move"
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotCommand'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotCommand'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotCommand'
  '/api/robot-commands/{id}':
    get:
      tags:
        - RobotCommands
      summary: Retreives a robot command by its ID.
      description: "Sample request: \r\n\r\nGET /api/robot-commands/{id}"
      operationId: GetRobotCommand
      parameters:
        - name: id
          in: path
          description: The ID of the robot command to be fetched.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returns the robot command.
        '404':
          description: If the robot command with the specified ID is not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - RobotCommands
      summary: Updates an already existing robot command.
      description: "Sample request: \r\n\r\nPUT /api/robot-commands/{id}\r\n{\r\n    \"id\": {id},\r\n    \"name\": \"BLINK\", \r\n    \"isMoveCommand\": false, \r\n    \"description\": \"Lights on the moon\" \r\n}"
      parameters:
        - name: id
          in: path
          description: The ID of the robot command to update.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        description: The updated information for the robot command.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RobotCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RobotCommand'
      responses:
        '204':
          description: No content if the update is successful.
        '400':
          description: If the provided data is invalid.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If the robot command with the specified ID is not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - RobotCommands
      summary: Deletes a robot command by its ID.
      description: "Sample request: \r\n\r\nDELETE /api/robot-commands/{id}"
      parameters:
        - name: id
          in: path
          description: The ID of the robot command to delete.
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No content if the deletion is successful.
        '404':
          description: If the robot command with the specified ID is not found.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    Map:
      type: object
      properties:
        id:
          type: integer
          format: int32
        columns:
          type: integer
          format: int32
        rows:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
          nullable: true
        modifiedDate:
          type: string
          format: date-time
          nullable: true
        isSquare:
          type: boolean
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    RobotCommand:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        isMoveCommand:
          type: boolean
        createdDate:
          type: string
          format: date-time
          nullable: true
        modifiedDate:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false