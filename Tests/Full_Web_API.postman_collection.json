{
	"info": {
		"_postman_id": "d2aafd06-394c-420f-beac-fcce2cb94cd8",
		"name": "Full_Web_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33045955"
	},
	"item": [
		{
			"name": "all-robot-commands",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are auto-generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Id field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Name field should be a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"IsMoveCommand field is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(command) {\r",
							"        pm.expect(command.isMoveCommand).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet\r",
							"pm.test(\"Response body contains an array of robot commands\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('array'); \r",
							"}); \r",
							"\r",
							"pm.test(\"Each command in the commands contains valid properties\", function \r",
							"() { \r",
							"    var robotCommands = pm.response.json(); \r",
							"    for (const command of robotCommands) { \r",
							"        pm.expect(command).to.have.property('id'); \r",
							"        pm.expect(command).to.have.property('name'); \r",
							"        pm.expect(command).to.have.property('description'); \r",
							"    } \r",
							"}); \r",
							"\r",
							"pm.test(\"Check if the URL entered is correct\", function () { \r",
							"    const actualUrl = pm.request.url.toString();\r",
							"    var expectedUrlPattern = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/robot-commands';\r",
							"    \r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern));\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands"
					]
				}
			},
			"response": []
		},
		{
			"name": "move-robot-commands",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number');\r",
							"    pm.expect(item.id).to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(command) {\r",
							"    pm.expect(command.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"IsMoveCommand is a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.isMoveCommand).to.be.a('boolean');\r",
							"  });\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet\r",
							"pm.test(\"Response body contains an array of robot commands\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('array'); \r",
							"}); \r",
							"\r",
							"pm.test(\"Each command in the commands contains valid properties\", function \r",
							"() { \r",
							"var robotCommands = pm.response.json(); \r",
							"for (const command of robotCommands) { \r",
							"        pm.expect(command).to.have.property('id'); \r",
							"        pm.expect(command).to.have.property('name'); \r",
							"        pm.expect(command).to.have.property('description'); \r",
							"    } \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check if the URL entered is correct\", function () { \r",
							"    const actualUrl = pm.request.url.toString();\r",
							"    var expectedUrlPattern = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/robot-commands/move';\r",
							"    \r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern));\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands/move",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands",
						"move"
					]
				}
			},
			"response": []
		},
		{
			"name": "read-robot-command",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are auto-generated by postbot and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.isMoveCommand).to.exist;\r",
							"    pm.expect(responseData.createdDate).to.exist;\r",
							"    pm.expect(responseData.modifiedDate).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Description is either null or a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.description).to.satisfy((description) => {\r",
							"    return description === null || (typeof description === 'string' && description.length > 0);\r",
							"  }, \"Description should be either null or a non-empty string\");\r",
							"});\r",
							"\r",
							"var createdDate = pm.response.json().createdDate.split('T')[0];\r",
							"var modifiedDate = pm.response.json().modifiedDate.split('T')[0];\r",
							"\r",
							"pm.test(\"Created date is in valid date format\", function () {\r",
							"    pm.expect(createdDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Modified date is in valid date format\", function () {\r",
							"    pm.expect(modifiedDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet and maodifed by me\r",
							"pm.test(\"Response body contains an object of robot command\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('object'); \r",
							"}); \r",
							"\r",
							"pm.test(\"The robot command contains valid properties\", function \r",
							"() { \r",
							"    const command = pm.response.json(); \r",
							"    pm.expect(command).to.have.property('id'); \r",
							"    pm.expect(command).to.have.property('name'); \r",
							"    pm.expect(command).to.have.property('description'); \r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands/1",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands",
						"1"
					]
				},
				"description": "For this change the endpoint value accordingly to view any other command.\r\nNote: I have set it to 1 in the example."
			},
			"response": []
		},
		{
			"name": "create-robot-command",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object').and.not.null;\r",
							"\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('description');\r",
							"    pm.expect(responseData).to.have.property('isMoveCommand');\r",
							"    pm.expect(responseData).to.have.property('createdDate');\r",
							"    pm.expect(responseData).to.have.property('modifiedDate');\r",
							"});\r",
							"\r",
							"pm.test(\"Name and description are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"IsMoveCommand is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.isMoveCommand).to.be.a('boolean');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 6,\r\n    \"name\": \"BLINK\",\r\n    \"isMoveCommand\": true, \r\n    \"description\": \"Robot blinks.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands"
					]
				},
				"description": "For this change the JSON file accordingly to add other robot commands."
			},
			"response": []
		},
		{
			"name": "update-robot-command",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 204', function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test('Response body is null or empty', function () {\r",
							"    const responseData = pm.response.text();\r",
							"    pm.expect(responseData).to.be.oneOf([\r",
							"        null,\r",
							"        ''\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test(\"Verify the request URL pattern is correct\", function () {\r",
							"    const expectedUrlPattern1 = \"http://{{api-host}}:{{controller-port}}/api/robot-commands/\\\\d+\";\r",
							"    const expectedUrlPattern2 = /http:\\/\\/localhost:5082\\/api\\/robot-commands\\/\\d+/;\r",
							"\r",
							"    const actualUrl = pm.request.url.toString();\r",
							"\r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern1)) || actualUrl.match(expectedUrlPattern2);\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 6,\r\n    \"name\": \"JUMP\",\r\n    \"is_move_command\": true, \r\n    \"description\": \"Robot jumps.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands/6",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-robot-command",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate that the request has been successfully processed and the resource has been deleted\", function () {\r",
							"    pm.response.to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure that the response does not contain any data or error message\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands/6",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "all-maps",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  responseData.forEach(function(map) {\r",
							"    pm.expect(map.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"IsSquare field is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.isSquare).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response body contains an array of maps\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('array'); \r",
							"}); \r",
							"\r",
							"pm.test(\"Each map in the maps contains valid properties\", function \r",
							"() { \r",
							"var maps = pm.response.json(); \r",
							"for (const map of maps) { \r",
							"        pm.expect(map).to.have.property('id'); \r",
							"        pm.expect(map).to.have.property('columns'); \r",
							"        pm.expect(map).to.have.property('rows'); \r",
							"        pm.expect(map).to.have.property('name'); \r",
							"        pm.expect(map).to.have.property('description'); \r",
							"    } \r",
							"}); \r",
							"\r",
							"pm.test(\"Check if the URL entered is correct\", function () { \r",
							"    const actualUrl = pm.request.url.toString();\r",
							"    var expectedUrlPattern = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/maps';\r",
							"    \r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern));\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "square-maps",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"IsSquare property is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.isSquare).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response body contains an array of maps\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('array'); \r",
							"}); \r",
							"\r",
							"pm.test(\"Each map in the maps contains valid properties\", function \r",
							"() { \r",
							"var maps = pm.response.json(); \r",
							"for (const map of maps) { \r",
							"        pm.expect(map).to.have.property('id'); \r",
							"        pm.expect(map).to.have.property('columns'); \r",
							"        pm.expect(map).to.have.property('rows'); \r",
							"        pm.expect(map).to.have.property('name'); \r",
							"        pm.expect(map).to.have.property('description'); \r",
							"    } \r",
							"}); \r",
							"\r",
							"pm.test(\"Check if the URL entered is correct\", function () { \r",
							"    const actualUrl = pm.request.url.toString();\r",
							"    var expectedUrlPattern = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/maps';\r",
							"    \r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern));\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps/square",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps",
						"square"
					]
				}
			},
			"response": []
		},
		{
			"name": "read-map",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Name and description must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response body contains an object of map\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('object'); \r",
							"}); \r",
							"\r",
							"pm.test(\"The map contains valid properties\", function \r",
							"() { \r",
							"    var map = pm.response.json(); \r",
							"    pm.expect(map).to.have.property('id'); \r",
							"    pm.expect(map).to.have.property('columns'); \r",
							"    pm.expect(map).to.have.property('rows'); \r",
							"    pm.expect(map).to.have.property('name'); \r",
							"    pm.expect(map).to.have.property('description'); \r",
							"}); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps/1",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps",
						"1"
					]
				},
				"description": "For this change the endpoint accordingly to see other maps."
			},
			"response": []
		},
		{
			"name": "create-map",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test('Response status code is 201', function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"})\r",
							"\r",
							"pm.test('Name and description must be non-empty strings', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Name should not be empty');\r",
							"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Description should not be empty');\r",
							"})\r",
							"\r",
							"pm.test(\"IsSquare field is either null or a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('isSquare').that.is.oneOf([null, true, false]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 4,\r\n    \"columns\": 50,\r\n    \"rows\": 50,\r\n    \"name\": \"50x50 Map\",\r\n    \"description\": \"Map test run\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-map",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the HTTP method used is PUT\", function () {\r",
							"    pm.expect(pm.request.method).to.equal(\"PUT\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate that the response body is empty\", function () {\r",
							"  pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the request URL pattern is correct\", function () {\r",
							"    const expectedUrlPattern1 = \"http://{{api-host}}:{{controller-port}}/api/maps/\\\\d+\";\r",
							"    const expectedUrlPattern2 = /http:\\/\\/localhost:5082\\/api\\/maps\\/\\d+/;\r",
							"\r",
							"    const actualUrl = pm.request.url.toString();\r",
							"\r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern1)) || actualUrl.match(expectedUrlPattern2);\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 4,\r\n    \"columns\": 60,\r\n    \"rows\": 100,\r\n    \"name\": \"New11 run\",\r\n    \"description\": \"Map test run\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps/4",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-map",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response does not contain any sensitive information\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps/4",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "check-coordinate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is true\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"true\");\r",
							"});\r",
							"\r",
							"pm.test(\"Endpoint for switching the map has been changed successfully\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.a('boolean').and.to.equal(true);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps/1/0-0",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps",
						"1",
						"0-0"
					]
				},
				"description": "For this change the endpoints for the map to switch the map and for coordinate change the coordinates.\r\nNote: I have taken map 1 and coordinate 0-0 in this example."
			},
			"response": []
		},
		{
			"name": "get-all-users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user).to.include.all.keys('id', 'email', 'firstName', 'lastName', 'passwordHash', 'role', 'createdDate', 'modifiedDate');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Description is either null or a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.description).to.satisfy(val => val === null || (typeof val === 'string' && val.length > 0));\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Role is a valid role type\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.role).to.be.oneOf(['Admin', 'User', 'Member', 'Tester', null]);\r",
							"    });\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response body contains an array of users\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('array'); \r",
							"}); \r",
							"\r",
							"pm.test(\"Each user in the users contains valid properties\", function \r",
							"() { \r",
							"var users = pm.response.json(); \r",
							"for (const user of users) { \r",
							"        pm.expect(user).to.have.property('id'); \r",
							"        pm.expect(user).to.have.property('email'); \r",
							"        pm.expect(user).to.have.property('firstName'); \r",
							"        pm.expect(user).to.have.property('lastName'); \r",
							"        pm.expect(user).to.have.property('passwordHash'); \r",
							"        pm.expect(user).to.have.property('role'); \r",
							"        pm.expect(user).to.have.property('description'); \r",
							"    } \r",
							"}); \r",
							"\r",
							"pm.test(\"Check if the URL entered is correct\", function () { \r",
							"    const actualUrl = pm.request.url.toString();\r",
							"    var expectedUrlPattern = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/users';\r",
							"    \r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern));\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add-new-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"pm.test(\"Description is either null or a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.description).to.satisfy((value) => {\r",
							"    return value === null || (typeof value === 'string' && value.length > 0);\r",
							"  }, \"Description should be either null or a non-empty string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Role is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Id\": 3,\r\n    \"Email\": \"anneshu_test2@gmail.com\",\r\n    \"FirstName\": \"Anneshu1\",\r\n    \"LastName\": \"PTest2\",\r\n    \"PasswordHash\": \"password\",\r\n    \"Role\": \"Member\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-user-details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the request URL pattern is correct\", function () {\r",
							"    const expectedUrlPattern1 = \"http://{{api-host}}:{{controller-port}}/api/users/\\\\d+\";\r",
							"    const expectedUrlPattern2 = /http:\\/\\/localhost:5082\\/api\\/users\\/\\d+/;\r",
							"    const actualUrl = pm.request.url.toString();\r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern1)) || actualUrl.match(expectedUrlPattern2);\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the response body is empty\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Id\": 3,\r\n    \"Email\": \"anneshu_test@gmail.com\",\r\n    \"FirstName\": \"Anneshu\",\r\n    \"LastName\": \"UTest\",\r\n    \"PasswordHash\": \"password\",\r\n    \"Role\": \"User\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users/3",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-user-credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the response body is empty or null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"No specific headers are present in the response\", function () {\r",
							"    pm.expect(pm.response.headers.has(\"specific-header-name\")).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm the request has been successfully processed without any data being returned\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Email\": \"anneshu_test_patch@gmail.com\",\r\n    \"Password\": \"patch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users/3",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me",
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Content-Type header should not exist\", function () {",
							"    const contentType = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(contentType).to.not.exist;",
							"});",
							"",
							"pm.test(\"Response body is null\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    pm.expect(responseData).to.be.null;",
							"});",
							"",
							"pm.test(\"Verify that user with the given ID is deleted from the system\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    pm.expect(responseData).to.be.null;",
							"});",
							"",
							"pm.test(\"Ensure response does not contain sensitive information\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    pm.expect(responseData).to.be.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users/3",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-admin-users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    const requiredFields = [\"id\", \"email\", \"firstName\", \"lastName\", \"passwordHash\", \"role\", \"createdDate\", \"modifiedDate\"];\r",
							"    responseData.forEach(function(user) {\r",
							"        requiredFields.forEach(function(field) {\r",
							"            pm.expect(user).to.have.property(field);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Role is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.role).to.be.a('string').and.to.have.length.at.least(1, \"Role should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response body contains an array of users\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('array'); \r",
							"}); \r",
							"\r",
							"pm.test(\"Each user in the users contains valid properties\", function \r",
							"() { \r",
							"var users = pm.response.json(); \r",
							"for (const user of users) { \r",
							"        pm.expect(user).to.have.property('id'); \r",
							"        pm.expect(user).to.have.property('email'); \r",
							"        pm.expect(user).to.have.property('firstName'); \r",
							"        pm.expect(user).to.have.property('lastName'); \r",
							"        pm.expect(user).to.have.property('passwordHash'); \r",
							"        pm.expect(user).to.have.property('role'); \r",
							"        pm.expect(user).to.have.property('description'); \r",
							"    } \r",
							"}); \r",
							"\r",
							"pm.test(\"Check if the URL entered is correct\", function () { \r",
							"    const actualUrl = pm.request.url.toString();\r",
							"    var expectedUrlPattern = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/users/admin';\r",
							"    \r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern));\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users/admin",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-user-by-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('id', 'email', 'firstName', 'lastName', 'passwordHash', 'role', 'createdDate', 'modifiedDate');\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Description is either null or a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.description).to.satisfy((description) => {\r",
							"        return description === null || (typeof description === 'string' && description.length > 0);\r",
							"    }, \"Description should be either null or a non-empty string\");\r",
							"});\r",
							"\r",
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response body contains an object of user\", function () { \r",
							"    pm.expect(pm.response.json()).to.be.an('object'); \r",
							"}); \r",
							"\r",
							"pm.test(\"The user contains valid properties\", function \r",
							"() { \r",
							"    var user = pm.response.json(); \r",
							"    pm.expect(user).to.have.property('id'); \r",
							"    pm.expect(user).to.have.property('email'); \r",
							"    pm.expect(user).to.have.property('firstName'); \r",
							"    pm.expect(user).to.have.property('lastName'); \r",
							"    pm.expect(user).to.have.property('passwordHash'); \r",
							"    pm.expect(user).to.have.property('role'); \r",
							"    pm.expect(user).to.have.property('description'); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users/2",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "create-robot-command-with-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object').and.not.null;\r",
							"\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('description');\r",
							"    pm.expect(responseData).to.have.property('isMoveCommand');\r",
							"    pm.expect(responseData).to.have.property('createdDate');\r",
							"    pm.expect(responseData).to.have.property('modifiedDate');\r",
							"});\r",
							"\r",
							"pm.test(\"Name and description are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"IsMoveCommand is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.isMoveCommand).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// These tests were given in the task sheet and modified by me\r",
							"pm.test(\"Response body is not empty\", function () { \r",
							"    pm.response.to.have.jsonBody(); \r",
							"    pm.response.to.not.be.null; \r",
							"    pm.response.to.not.be.undefined; \r",
							"}); \r",
							"\r",
							"pm.test(\"Response body contains the newly created robot command\", function () { \r",
							"    var command = pm.response.json(); \r",
							"    pm.expect(command).to.have.property('id'); \r",
							"    pm.expect(command).to.have.property('name'); \r",
							"    pm.expect(command).to.have.property('description'); \r",
							"    pm.expect(command).to.have.property('isMoveCommand'); \r",
							"}); \r",
							"\r",
							"// Test if the response body contains the correct robot command \r",
							"pm.test(\"Test newly created command name\", function () { \r",
							"    var command = pm.response.json(); \r",
							"    //pm.expect(command.name).to.equal(pm.variables.get('command-name')); \r",
							"    var expectedName = pm.variables.get('command-name'); \r",
							"    console.log(expectedName); \r",
							"    console.log(command.name); \r",
							"    var areNamesEqual = expectedName == command.name; \r",
							"    console.log(\"Newly created command name matches the one in the env variable: \" + areNamesEqual); \r",
							"    pm.expect(command.name).to.equal(pm.variables.get('command-name')); \r",
							"}); \r",
							"\r",
							"pm.test(\"Check a newly created resource URL to be in the Location HTTP header\", function () { \r",
							"    pm.response.to.have.header(\"Location\") \r",
							"    var command = pm.response.json(); \r",
							"    console.log(command.id); \r",
							"    var newResourceUrl = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/robot-commands/' + command.id \r",
							"    console.log(newResourceUrl); \r",
							"    pm.expect(pm.response.headers.get('Location')).to.eql(newResourceUrl) \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 7,\r\n    \"name\": \"{{command-name}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"isMoveCommand\": {{is-move-cmd}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-robot-command-using-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test('Response status code is 204', function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test('Response body is null or empty', function () {\r",
							"    const responseData = pm.response.text();\r",
							"    pm.expect(responseData).to.be.oneOf([\r",
							"        null,\r",
							"        ''\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test(\"Verify the request URL pattern is correct\", function () {\r",
							"    const expectedUrlPattern1 = \"http://{{api-host}}:{{controller-port}}/api/robot-commands/\\\\d+\";\r",
							"    const expectedUrlPattern2 = /http:\\/\\/localhost:5082\\/api\\/robot-commands\\/\\d+/;\r",
							"\r",
							"    const actualUrl = pm.request.url.toString();\r",
							"\r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern1)) || actualUrl.match(expectedUrlPattern2);\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 7,\r\n    \"name\": \"{{updated-cmd-name}}\",\r\n    \"isMoveCommand\": true, \r\n    \"description\": \"{{updated-desc}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands/7",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "create-map-using-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests auto-generated by the postbot and modified by me\r",
							"pm.test('Response status code is 201', function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"})\r",
							"\r",
							"pm.test('Name and description must be non-empty strings', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Name should not be empty');\r",
							"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Description should not be empty');\r",
							"})\r",
							"\r",
							"pm.test(\"IsSquare field is either null or a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('isSquare').that.is.oneOf([null, true, false]);\r",
							"});\r",
							"\r",
							"// These tests were given in the task sheet and modiied by me\r",
							"pm.test(\"Response body is not empty\", function () { \r",
							"    pm.response.to.have.jsonBody(); \r",
							"    pm.response.to.not.be.null; \r",
							"    pm.response.to.not.be.undefined; \r",
							"}); \r",
							"\r",
							"pm.test(\"Response body contains the newly created map\", function () { \r",
							"    var command = pm.response.json(); \r",
							"    pm.expect(command).to.have.property('id'); \r",
							"    pm.expect(command).to.have.property('name'); \r",
							"    pm.expect(command).to.have.property('description'); \r",
							"    pm.expect(command).to.have.property('columns'); \r",
							"    pm.expect(command).to.have.property('rows'); \r",
							"}); \r",
							"\r",
							"// Test if the response body contains the correct map \r",
							"pm.test(\"Test newly created map name\", function () { \r",
							"    var map = pm.response.json(); \r",
							"    //pm.expect(map.name).to.equal(pm.variables.get('map-name')); \r",
							"    var expectedName = pm.variables.get('map-name'); \r",
							"    console.log(expectedName); \r",
							"    console.log(map.name); \r",
							"    var areNamesEqual = expectedName == map.name; \r",
							"    console.log(\"Newly created map name matches the one in the env variable: \" + areNamesEqual); \r",
							"    pm.expect(map.name).to.equal(pm.variables.get('map-name')); \r",
							"}); \r",
							"\r",
							"pm.test(\"Check a newly created resource URL to be in the Location HTTP header\", function () { \r",
							"    pm.response.to.have.header(\"Location\") \r",
							"    var map = pm.response.json(); \r",
							"    console.log(map.id); \r",
							"    var newResourceUrl = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/maps/' + map.id \r",
							"    console.log(newResourceUrl); \r",
							"    pm.expect(pm.response.headers.get('Location')).to.eql(newResourceUrl) \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 5,\r\n    \"columns\": {{cols}},\r\n    \"rows\": {{rows}},\r\n    \"name\": \"{{map-name}}\",\r\n    \"description\": \"{{map-desc}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-map-using-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the HTTP method used is PUT\", function () {\r",
							"    pm.expect(pm.request.method).to.equal(\"PUT\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate that the response body is empty\", function () {\r",
							"  pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the request URL pattern is correct\", function () {\r",
							"    const expectedUrlPattern1 = \"http://{{api-host}}:{{controller-port}}/api/maps/\\\\d+\";\r",
							"    const expectedUrlPattern2 = /http:\\/\\/localhost:5082\\/api\\/maps\\/\\d+/;\r",
							"\r",
							"    const actualUrl = pm.request.url.toString();\r",
							"\r",
							"    const isMatched = actualUrl.match(new RegExp(expectedUrlPattern1)) || actualUrl.match(expectedUrlPattern2);\r",
							"\r",
							"    pm.expect(isMatched).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 5,\r\n    \"columns\": {{cols}},\r\n    \"rows\": {{rows}},\r\n    \"name\": \"{{updated-map-name}}\",\r\n    \"description\": \"{{map-desc}}\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps/5",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "add-new-user-using-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"pm.test(\"Description is either null or a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.description).to.satisfy((value) => {\r",
							"    return value === null || (typeof value === 'string' && value.length > 0);\r",
							"  }, \"Description should be either null or a non-empty string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Role is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");\r",
							"});\r",
							"\r",
							"// These tests were given in the task sheet and modified by me\r",
							"pm.test(\"Response body is not empty\", function () { \r",
							"    pm.response.to.have.jsonBody(); \r",
							"    pm.response.to.not.be.null; \r",
							"    pm.response.to.not.be.undefined; \r",
							"}); \r",
							"\r",
							"pm.test(\"Response body contains the newly created users\", function () { \r",
							"    var command = pm.response.json(); \r",
							"    pm.expect(command).to.have.property('id'); \r",
							"    pm.expect(command).to.have.property('email'); \r",
							"    pm.expect(command).to.have.property('firstName'); \r",
							"    pm.expect(command).to.have.property('lastName'); \r",
							"    pm.expect(command).to.have.property('passwordHash'); \r",
							"    pm.expect(command).to.have.property('description'); \r",
							"    pm.expect(command).to.have.property('role'); \r",
							"}); \r",
							"\r",
							"// Test if the response body contains the correct user\r",
							"pm.test(\"Test newly created user name\", function () { \r",
							"    var user = pm.response.json(); \r",
							"    //pm.expect(user.name).to.equal(pm.variables.get('user-name')); \r",
							"    var expectedName = pm.variables.get('user-name'); \r",
							"    console.log(expectedName); \r",
							"    console.log(user.name); \r",
							"    var areNamesEqual = expectedName == user.name; \r",
							"    console.log(\"Newly created user name matches the one in the env variable: \" + areNamesEqual); \r",
							"    pm.expect(user.name).to.equal(pm.variables.get('user-name')); \r",
							"}); \r",
							"\r",
							"pm.test(\"Check a newly created resource URL to be in the Location HTTP header\", function () { \r",
							"    pm.response.to.have.header(\"Location\") \r",
							"    var user = pm.response.json(); \r",
							"    console.log(user.id); \r",
							"    var newResourceUrl = 'http://' + pm.variables.get('api-host')  + ':' + pm.variables.get('controller-port') + '/api/users/' + user.id \r",
							"    console.log(newResourceUrl); \r",
							"    pm.expect(pm.response.headers.get('Location')).to.eql(newResourceUrl) \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Id\": 4,\r\n    \"Email\": \"{{user-email}}\",\r\n    \"FirstName\": \"{{user-firstname}}\",\r\n    \"LastName\": \"{{user-lastname}}\",\r\n    \"PasswordHash\": \"{{user-pass}}\",\r\n    \"Role\": \"{{user-role}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-robot-command-for-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are generated by the postbot and modified by me\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate that the request has been successfully processed and the resource has been deleted\", function () {\r",
							"    pm.response.to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure that the response does not contain any data or error message\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"\r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/robot-commands/7",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"robot-commands",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-map-for-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header should not exist\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response does not contain any sensitive information\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/maps/5",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"maps",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-user-for-var",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These tests are given in the task sheet and modified by me",
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Content-Type header should not exist\", function () {",
							"    const contentType = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(contentType).to.not.exist;",
							"});",
							"",
							"pm.test(\"Response body is null\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    pm.expect(responseData).to.be.null;",
							"});",
							"",
							"pm.test(\"Verify that user with the given ID is deleted from the system\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    pm.expect(responseData).to.be.null;",
							"});",
							"",
							"pm.test(\"Ensure response does not contain sensitive information\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    pm.expect(responseData).to.be.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "nkworks@gmail.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{controller-port}}/api/users/4",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{controller-port}}",
					"path": [
						"api",
						"users",
						"4"
					]
				}
			},
			"response": []
		}
	]
}